{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchMovies } from \"../redux/slices/moviesSlice\";\nconst useFetchMovies = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    movies,\n    loading,\n    error\n  } = useSelector(state => state.movies);\n  useEffect(() => {\n    dispatch(fetchMovies());\n  }, [dispatch]);\n  return {\n    movies: movies === null || movies === void 0 ? void 0 : movies.movies,\n    loading,\n    error\n  };\n};\n_s(useFetchMovies, \"KcRVy4B5fHq4DpZpLH7GEneKyks=\", false, function () {\n  return [useDispatch, useSelector];\n});\nexport default useFetchMovies;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","fetchMovies","useFetchMovies","_s","dispatch","movies","loading","error","state"],"sources":["/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/hooks/useFetchMovies.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchMovies } from \"../redux/slices/moviesSlice\";\nimport { RootState, AppDispatch } from \"../redux/store\";\n\nconst useFetchMovies = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const { movies, loading, error } = useSelector(\n    (state: RootState) => state.movies\n  );\n\n  useEffect(() => {\n    dispatch(fetchMovies());\n  }, [dispatch]);\n\n  return { movies: movies?.movies, loading, error };\n};\n\nexport default useFetchMovies;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,6BAA6B;AAGzD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAqB,GAAGL,WAAW,CAAC,CAAC;EAC3C,MAAM;IAAEM,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGP,WAAW,CAC3CQ,KAAgB,IAAKA,KAAK,CAACH,MAC9B,CAAC;EAEDP,SAAS,CAAC,MAAM;IACdM,QAAQ,CAACH,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,CAACG,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEC,MAAM,EAAEA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEA,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAC;AACnD,CAAC;AAACJ,EAAA,CAXID,cAAc;EAAA,QACYH,WAAW,EACNC,WAAW;AAAA;AAWhD,eAAeE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}