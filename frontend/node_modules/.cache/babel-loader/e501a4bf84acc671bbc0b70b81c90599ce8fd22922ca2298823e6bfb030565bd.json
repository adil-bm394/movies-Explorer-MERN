{"ast":null,"code":"var _jsxFileName = \"/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/utils/FavouriteButton/FavoriteButton.tsx\",\n  _s = $RefreshSig$();\n// import React, { useMemo } from \"react\";\n// import IconButton from \"@mui/material/IconButton\";\n// import FavoriteBorder from \"@mui/icons-material/FavoriteBorder\";\n// import FavoriteIcon from \"@mui/icons-material/Favorite\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { RootState, AppDispatch } from \"../../redux/store\";\n// import { addFavorite, removeFavorite } from \"../../redux/slices/favoritesSlice\";\n// import { toast } from \"react-toastify\";\n// import { Movie } from \"../../utils/interface/types\";\n\n// interface FavoriteButtonProps {\n//   movie: Movie;\n// }\n\n// const FavoriteButton: React.FC<FavoriteButtonProps> = ({ movie }) => {\n//   const dispatch: AppDispatch = useDispatch();\n//   const isLoggedIn = useSelector((state: RootState) => state.user.isLoggedIn);\n//   const favorites = useSelector(\n//     (state: RootState) => state.favorites.favorites\n//   );\n//   console.log(\"favrites id\",favorites)\n//   console.log(movie._id, \"movieid\")\n//   const isFavorite = favorites.some((fav) => {\n//     // console.log(fav, movie._id, \"sssssss\");\n//     // return fav === movie._id;\n//   });\n\n//   console.log(isFavorite, \"dfkfks\");\n//   const handleFavoriteClick = () => {\n//     if (isLoggedIn) {\n//       if (isFavorite) {\n//         dispatch(removeFavorite(movie.imdbID));\n//       } else {\n//         dispatch(addFavorite(movie));\n//       }\n//     } else {\n//       toast.error(\"You must be logged in to add favorite movies.\");\n//     }\n//   };\n\n//   return (\n//     <IconButton onClick={handleFavoriteClick} color=\"default\">\n//       {isFavorite ? <FavoriteIcon sx={{ color: \"red\" }} /> : <FavoriteBorder />}\n//     </IconButton>\n//   );\n// };\n\n// export default FavoriteButton;\n\nimport React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FavoriteBorder from \"@mui/icons-material/FavoriteBorder\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFavorite, removeFavorite } from \"../../redux/slices/favoritesSlice\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteButton = ({\n  movie\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(state => state.user.isLoggedIn);\n  const favorites = useSelector(state => state.favorites.favorites);\n  console.log(favorites, \"favoritesiid\");\n  console.log(movie._id, \"movieid\");\n  // Determine if the movie is already in favorites\n  const id = favorites.map(id => {\n    return id;\n  });\n  for (let i = 0; i < id.length; i++) {}\n  const handleFavoriteClick = () => {\n    if (isLoggedIn) {\n      if (isFavorite) {\n        dispatch(removeFavorite(movie.imdbID));\n      } else {\n        dispatch(addFavorite(movie));\n      }\n    } else {\n      toast.error(\"You must be logged in to add favorite movies.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(IconButton, {\n    onClick: handleFavoriteClick,\n    color: \"default\",\n    children: isFavorite ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n      sx: {\n        color: \"red\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(FavoriteBorder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 62\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoriteButton, \"vBESzgI1FMUCVaSuyzzgJpAreh4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = FavoriteButton;\nexport default FavoriteButton;\nvar _c;\n$RefreshReg$(_c, \"FavoriteButton\");","map":{"version":3,"names":["React","IconButton","FavoriteBorder","FavoriteIcon","useDispatch","useSelector","addFavorite","removeFavorite","toast","jsxDEV","_jsxDEV","FavoriteButton","movie","_s","dispatch","isLoggedIn","state","user","favorites","console","log","_id","id","map","i","length","handleFavoriteClick","isFavorite","imdbID","error","onClick","color","children","sx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/utils/FavouriteButton/FavoriteButton.tsx"],"sourcesContent":["// import React, { useMemo } from \"react\";\n// import IconButton from \"@mui/material/IconButton\";\n// import FavoriteBorder from \"@mui/icons-material/FavoriteBorder\";\n// import FavoriteIcon from \"@mui/icons-material/Favorite\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { RootState, AppDispatch } from \"../../redux/store\";\n// import { addFavorite, removeFavorite } from \"../../redux/slices/favoritesSlice\";\n// import { toast } from \"react-toastify\";\n// import { Movie } from \"../../utils/interface/types\";\n\n// interface FavoriteButtonProps {\n//   movie: Movie;\n// }\n\n// const FavoriteButton: React.FC<FavoriteButtonProps> = ({ movie }) => {\n//   const dispatch: AppDispatch = useDispatch();\n//   const isLoggedIn = useSelector((state: RootState) => state.user.isLoggedIn);\n//   const favorites = useSelector(\n//     (state: RootState) => state.favorites.favorites\n//   );\n//   console.log(\"favrites id\",favorites)\n//   console.log(movie._id, \"movieid\")\n//   const isFavorite = favorites.some((fav) => {\n//     // console.log(fav, movie._id, \"sssssss\");\n//     // return fav === movie._id;\n//   });\n\n//   console.log(isFavorite, \"dfkfks\");\n//   const handleFavoriteClick = () => {\n//     if (isLoggedIn) {\n//       if (isFavorite) {\n//         dispatch(removeFavorite(movie.imdbID));\n//       } else {\n//         dispatch(addFavorite(movie));\n//       }\n//     } else {\n//       toast.error(\"You must be logged in to add favorite movies.\");\n//     }\n//   };\n\n//   return (\n//     <IconButton onClick={handleFavoriteClick} color=\"default\">\n//       {isFavorite ? <FavoriteIcon sx={{ color: \"red\" }} /> : <FavoriteBorder />}\n//     </IconButton>\n//   );\n// };\n\n// export default FavoriteButton;\n\nimport React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FavoriteBorder from \"@mui/icons-material/FavoriteBorder\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState, AppDispatch } from \"../../redux/store\";\nimport { addFavorite, removeFavorite } from \"../../redux/slices/favoritesSlice\";\nimport { toast } from \"react-toastify\";\nimport { Movie } from \"../../utils/interface/types\";\n\ninterface FavoriteButtonProps {\n  movie: Movie;\n}\n\nconst FavoriteButton: React.FC<FavoriteButtonProps> = ({ movie }) => {\n  const dispatch: AppDispatch = useDispatch();\n  const isLoggedIn = useSelector((state: RootState) => state.user.isLoggedIn);\n  const favorites = useSelector(\n    (state: RootState) => state.favorites.favorites\n  );\n  console.log(favorites, \"favoritesiid\");\n  console.log(movie._id, \"movieid\");\n  // Determine if the movie is already in favorites\n  const id = favorites.map((id)=>{\n    return id\n  })\n  for(let i =0 ;i<id.length;i++){\n    \n  }\n  const handleFavoriteClick = () => {\n    if (isLoggedIn) {\n      if (isFavorite) {\n        dispatch(removeFavorite(movie.imdbID));\n      } else {\n        dispatch(addFavorite(movie));\n      }\n    } else {\n      toast.error(\"You must be logged in to add favorite movies.\");\n    }\n  };\n\n  return (\n    <IconButton onClick={handleFavoriteClick} color=\"default\">\n      {isFavorite ? <FavoriteIcon sx={{ color: \"red\" }} /> : <FavoriteBorder />}\n    </IconButton>\n  );\n};\n\nexport default FavoriteButton;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,cAAc,MAAM,oCAAoC;AAC/D,OAAOC,YAAY,MAAM,8BAA8B;AACvD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,WAAW,EAAEC,cAAc,QAAQ,mCAAmC;AAC/E,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvC,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAMC,QAAqB,GAAGV,WAAW,CAAC,CAAC;EAC3C,MAAMW,UAAU,GAAGV,WAAW,CAAEW,KAAgB,IAAKA,KAAK,CAACC,IAAI,CAACF,UAAU,CAAC;EAC3E,MAAMG,SAAS,GAAGb,WAAW,CAC1BW,KAAgB,IAAKA,KAAK,CAACE,SAAS,CAACA,SACxC,CAAC;EACDC,OAAO,CAACC,GAAG,CAACF,SAAS,EAAE,cAAc,CAAC;EACtCC,OAAO,CAACC,GAAG,CAACR,KAAK,CAACS,GAAG,EAAE,SAAS,CAAC;EACjC;EACA,MAAMC,EAAE,GAAGJ,SAAS,CAACK,GAAG,CAAED,EAAE,IAAG;IAC7B,OAAOA,EAAE;EACX,CAAC,CAAC;EACF,KAAI,IAAIE,CAAC,GAAE,CAAC,EAAEA,CAAC,GAACF,EAAE,CAACG,MAAM,EAACD,CAAC,EAAE,EAAC,CAE9B;EACA,MAAME,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIX,UAAU,EAAE;MACd,IAAIY,UAAU,EAAE;QACdb,QAAQ,CAACP,cAAc,CAACK,KAAK,CAACgB,MAAM,CAAC,CAAC;MACxC,CAAC,MAAM;QACLd,QAAQ,CAACR,WAAW,CAACM,KAAK,CAAC,CAAC;MAC9B;IACF,CAAC,MAAM;MACLJ,KAAK,CAACqB,KAAK,CAAC,+CAA+C,CAAC;IAC9D;EACF,CAAC;EAED,oBACEnB,OAAA,CAACT,UAAU;IAAC6B,OAAO,EAAEJ,mBAAoB;IAACK,KAAK,EAAC,SAAS;IAAAC,QAAA,EACtDL,UAAU,gBAAGjB,OAAA,CAACP,YAAY;MAAC8B,EAAE,EAAE;QAAEF,KAAK,EAAE;MAAM;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAG3B,OAAA,CAACR,cAAc;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEjB,CAAC;AAACxB,EAAA,CAhCIF,cAA6C;EAAA,QACnBP,WAAW,EACtBC,WAAW,EACZA,WAAW;AAAA;AAAAiC,EAAA,GAHzB3B,cAA6C;AAkCnD,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}