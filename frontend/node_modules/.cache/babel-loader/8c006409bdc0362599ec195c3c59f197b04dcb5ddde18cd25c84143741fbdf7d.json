{"ast":null,"code":"import localForage from \"localforage\";\nconst commentsStore = localForage.createInstance({\n  name: \"commentsStore\"\n});\nconst ratingsStore = localForage.createInstance({\n  name: \"ratingsStore\"\n});\nexport const saveCommentToIndexedDB = async (movieId, comment) => {\n  const existingComments = (await commentsStore.getItem(movieId)) || [];\n  await commentsStore.setItem(movieId, [...existingComments, comment]);\n};\nexport const getCommentsFromIndexedDB = async movieId => {\n  return (await commentsStore.getItem(movieId)) || [];\n};\nexport const saveRatingToIndexedDB = async (movieId, rating) => {\n  const existingRatings = (await ratingsStore.getItem(movieId)) || [];\n  const updatedRatings = existingRatings.filter(r => r.userId !== rating.userId);\n  updatedRatings.push(rating);\n  await ratingsStore.setItem(movieId, updatedRatings);\n};\nexport const getRatingsFromIndexedDB = async movieId => {\n  return (await ratingsStore.getItem(movieId)) || [];\n};","map":{"version":3,"names":["localForage","commentsStore","createInstance","name","ratingsStore","saveCommentToIndexedDB","movieId","comment","existingComments","getItem","setItem","getCommentsFromIndexedDB","saveRatingToIndexedDB","rating","existingRatings","updatedRatings","filter","r","userId","push","getRatingsFromIndexedDB"],"sources":["/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/utils/LocalForage/LocalForage.tsx"],"sourcesContent":["import localForage from \"localforage\";\n\nconst commentsStore = localForage.createInstance({\n  name: \"commentsStore\",\n});\n\nconst ratingsStore = localForage.createInstance({\n  name: \"ratingsStore\",\n});\n\nexport const saveCommentToIndexedDB = async (\n  movieId: string,\n  comment: { userId: string; userName: string; comment: string }\n) => {\n  const existingComments: {\n    userId: string;\n    userName: string;\n    comment: string;\n  }[] = (await commentsStore.getItem(movieId)) || [];\n  await commentsStore.setItem(movieId, [...existingComments, comment]);\n};\n\nexport const getCommentsFromIndexedDB = async (\n  movieId: string\n): Promise<{ userId: string; userName: string; comment: string }[]> => {\n  return (await commentsStore.getItem(movieId)) || [];\n};\n\nexport const saveRatingToIndexedDB = async (\n  movieId: string,\n  rating: { userId: string; userName: string; rating: number }\n) => {\n  const existingRatings: {\n    userId: string;\n    userName: string;\n    rating: number;\n  }[] = (await ratingsStore.getItem(movieId)) || [];\n  const updatedRatings = existingRatings.filter(\n    (r) => r.userId !== rating.userId\n  );\n  updatedRatings.push(rating);\n  await ratingsStore.setItem(movieId, updatedRatings);\n};\n\nexport const getRatingsFromIndexedDB = async (\n  movieId: string\n): Promise<{ userId: string; userName: string; rating: number }[]> => {\n  return (await ratingsStore.getItem(movieId)) || [];\n};\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AAErC,MAAMC,aAAa,GAAGD,WAAW,CAACE,cAAc,CAAC;EAC/CC,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAGJ,WAAW,CAACE,cAAc,CAAC;EAC9CC,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,OAAO,MAAME,sBAAsB,GAAG,MAAAA,CACpCC,OAAe,EACfC,OAA8D,KAC3D;EACH,MAAMC,gBAIH,GAAG,CAAC,MAAMP,aAAa,CAACQ,OAAO,CAACH,OAAO,CAAC,KAAK,EAAE;EAClD,MAAML,aAAa,CAACS,OAAO,CAACJ,OAAO,EAAE,CAAC,GAAGE,gBAAgB,EAAED,OAAO,CAAC,CAAC;AACtE,CAAC;AAED,OAAO,MAAMI,wBAAwB,GAAG,MACtCL,OAAe,IACsD;EACrE,OAAO,CAAC,MAAML,aAAa,CAACQ,OAAO,CAACH,OAAO,CAAC,KAAK,EAAE;AACrD,CAAC;AAED,OAAO,MAAMM,qBAAqB,GAAG,MAAAA,CACnCN,OAAe,EACfO,MAA4D,KACzD;EACH,MAAMC,eAIH,GAAG,CAAC,MAAMV,YAAY,CAACK,OAAO,CAACH,OAAO,CAAC,KAAK,EAAE;EACjD,MAAMS,cAAc,GAAGD,eAAe,CAACE,MAAM,CAC1CC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAKL,MAAM,CAACK,MAC7B,CAAC;EACDH,cAAc,CAACI,IAAI,CAACN,MAAM,CAAC;EAC3B,MAAMT,YAAY,CAACM,OAAO,CAACJ,OAAO,EAAES,cAAc,CAAC;AACrD,CAAC;AAED,OAAO,MAAMK,uBAAuB,GAAG,MACrCd,OAAe,IACqD;EACpE,OAAO,CAAC,MAAMF,YAAY,CAACK,OAAO,CAACH,OAAO,CAAC,KAAK,EAAE;AACpD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}