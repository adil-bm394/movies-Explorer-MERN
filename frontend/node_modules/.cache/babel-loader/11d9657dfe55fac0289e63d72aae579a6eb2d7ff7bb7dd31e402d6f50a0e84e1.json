{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport localforage from \"localforage\";\nimport { login } from \"../redux/slices/userSlice\";\nimport registerSchema from \"../utils/ValidatioSchema/ValidationSchema\";\nconst useRegister = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const methods = useForm({\n    resolver: yupResolver(registerSchema)\n  });\n  const {\n    handleSubmit,\n    formState\n  } = methods;\n  const [registrationError, setRegistrationError] = useState(null);\n  const onSubmit = async data => {\n    try {\n      const users = (await localforage.getItem(\"users\")) || [];\n      const newUserId = (users.length + 1).toString(); // Use length+1 for ID\n      const newUser = {\n        ...data,\n        id: newUserId\n      };\n      users.push(newUser);\n\n      // Save updated users list to IndexedDB\n      await localforage.setItem(\"users\", users);\n\n      // Dispatch login action to Redux store\n      dispatch(login({\n        id: newUserId,\n        name: newUser.name,\n        email: newUser.email,\n        phone: newUser.phone\n      }));\n\n      // Navigate to the login page\n      setRegistrationError(null);\n      navigate(\"/login\");\n    } catch (error) {\n      setRegistrationError(\"Failed to save data\");\n    }\n  };\n  return {\n    ...methods,\n    handleSubmit,\n    onSubmit,\n    formState,\n    registrationError\n  };\n};\n_s(useRegister, \"Ku2LGA0773/SfuRxGhRH5ZEvpTc=\", false, function () {\n  return [useDispatch, useNavigate, useForm];\n});\nexport default useRegister;","map":{"version":3,"names":["useState","useDispatch","useForm","useNavigate","yupResolver","localforage","login","registerSchema","useRegister","_s","dispatch","navigate","methods","resolver","handleSubmit","formState","registrationError","setRegistrationError","onSubmit","data","users","getItem","newUserId","length","toString","newUser","id","push","setItem","name","email","phone","error"],"sources":["/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/hooks/useRegister.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm, UseFormReturn } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport localforage from \"localforage\";\nimport { login } from \"../redux/slices/userSlice\";\nimport registerSchema from \"../utils/ValidatioSchema/ValidationSchema\";\nimport { RegisterFormInputs} from \"../utils/interface/types\";\n\ninterface UseRegisterReturn extends UseFormReturn<RegisterFormInputs> {\n  onSubmit: (data: RegisterFormInputs) => void;\n  registrationError: string | null;\n}\n\nconst useRegister = (): UseRegisterReturn => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  \n  const methods = useForm<RegisterFormInputs>({\n    resolver: yupResolver(registerSchema),\n  });\n\n  const { handleSubmit, formState } = methods;\n  const [registrationError, setRegistrationError] = useState<string | null>(\n    null\n  );\n\n  const onSubmit = async (data: RegisterFormInputs) => {\n    try {\n      const users =\n        (await localforage.getItem<RegisterFormInputs[]>(\"users\")) || [];\n      const newUserId = (users.length + 1).toString(); // Use length+1 for ID\n      const newUser = { ...data, id: newUserId };\n      users.push(newUser);\n\n      // Save updated users list to IndexedDB\n      await localforage.setItem(\"users\", users);\n\n      // Dispatch login action to Redux store\n      dispatch(\n        login({\n          id: newUserId,\n          name: newUser.name,\n          email: newUser.email,\n          phone: newUser.phone,\n        })\n      );\n\n      // Navigate to the login page\n      setRegistrationError(null);\n      navigate(\"/login\");\n    } catch (error) {\n      setRegistrationError(\"Failed to save data\");\n    }\n  };\n\n  return {\n    ...methods,\n    handleSubmit,\n    onSubmit,\n    formState,\n    registrationError,\n  };\n};\n\nexport default useRegister;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,QAAuB,iBAAiB;AACxD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,KAAK,QAAQ,2BAA2B;AACjD,OAAOC,cAAc,MAAM,2CAA2C;AAQtE,MAAMC,WAAW,GAAGA,CAAA,KAAyB;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAG9B,MAAMS,OAAO,GAAGV,OAAO,CAAqB;IAC1CW,QAAQ,EAAET,WAAW,CAACG,cAAc;EACtC,CAAC,CAAC;EAEF,MAAM;IAAEO,YAAY;IAAEC;EAAU,CAAC,GAAGH,OAAO;EAC3C,MAAM,CAACI,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjB,QAAQ,CACxD,IACF,CAAC;EAED,MAAMkB,QAAQ,GAAG,MAAOC,IAAwB,IAAK;IACnD,IAAI;MACF,MAAMC,KAAK,GACT,CAAC,MAAMf,WAAW,CAACgB,OAAO,CAAuB,OAAO,CAAC,KAAK,EAAE;MAClE,MAAMC,SAAS,GAAG,CAACF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjD,MAAMC,OAAO,GAAG;QAAE,GAAGN,IAAI;QAAEO,EAAE,EAAEJ;MAAU,CAAC;MAC1CF,KAAK,CAACO,IAAI,CAACF,OAAO,CAAC;;MAEnB;MACA,MAAMpB,WAAW,CAACuB,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;;MAEzC;MACAV,QAAQ,CACNJ,KAAK,CAAC;QACJoB,EAAE,EAAEJ,SAAS;QACbO,IAAI,EAAEJ,OAAO,CAACI,IAAI;QAClBC,KAAK,EAAEL,OAAO,CAACK,KAAK;QACpBC,KAAK,EAAEN,OAAO,CAACM;MACjB,CAAC,CACH,CAAC;;MAED;MACAd,oBAAoB,CAAC,IAAI,CAAC;MAC1BN,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdf,oBAAoB,CAAC,qBAAqB,CAAC;IAC7C;EACF,CAAC;EAED,OAAO;IACL,GAAGL,OAAO;IACVE,YAAY;IACZI,QAAQ;IACRH,SAAS;IACTC;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CAlDID,WAAW;EAAA,QACEP,WAAW,EACXE,WAAW,EAGZD,OAAO;AAAA;AA+CzB,eAAeM,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}