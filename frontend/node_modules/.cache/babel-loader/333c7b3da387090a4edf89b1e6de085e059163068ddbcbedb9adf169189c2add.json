{"ast":null,"code":"// import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import { Movie, MoviesState } from \"../../utils/interface/types\";\n\n// const initialState: MoviesState = {\n//   movies: [],\n//   loading: false,\n//   error: null,\n// };\n\n// export const fetchMovies = createAsyncThunk(\"movies/fetchMovies\", async () => {\n//   const response = await axios.get(\"http://localhost:5000/api/movies\"); // Update with your backend URL\n//   return response.data;\n// });\n\n// const moviesSlice = createSlice({\n//   name: \"movies\",\n//   initialState,\n//   reducers: {\n//     addComment: (\n//       state,\n//       action: PayloadAction<{\n//         movieId: string;\n//         comment: string;\n//         userId: string;\n//         userName: string;\n//       }>\n//     ) => {\n//       const { movieId, comment, userId, userName } = action.payload;\n//       const movie = state.movies.find((m) => m._id === movieId);\n//       if (movie) {\n//         movie.comments.push({ userId, userName, comment });\n//       }\n//     },\n//     addRating: (\n//       state,\n//       action: PayloadAction<{\n//         movieId: string;\n//         rating: number;\n//         userId: string;\n//         userName: string;\n//       }>\n//     ) => {\n//       const { movieId, rating, userId, userName } = action.payload;\n//       const movie = state.movies.find((m) => m._id === movieId);\n//       if (movie) {\n//         movie.ratings.push({ userId, userName, rating });\n//       }\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchMovies.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(fetchMovies.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.movies = action.payload;\n//       })\n//       .addCase(fetchMovies.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.error.message || \"Failed to fetch movies\";\n//       });\n//   },\n// });\n\n// export const { addComment, addRating } = moviesSlice.actions;\n// export default moviesSlice.reducer;","map":{"version":3,"names":[],"sources":["/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/redux/slices/moviesSlice.tsx"],"sourcesContent":["// import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import { Movie, MoviesState } from \"../../utils/interface/types\";\n\n// const initialState: MoviesState = {\n//   movies: [],\n//   loading: false,\n//   error: null,\n// };\n\n// export const fetchMovies = createAsyncThunk(\"movies/fetchMovies\", async () => {\n//   const response = await axios.get(\"http://localhost:5000/api/movies\"); // Update with your backend URL\n//   return response.data;\n// });\n\n// const moviesSlice = createSlice({\n//   name: \"movies\",\n//   initialState,\n//   reducers: {\n//     addComment: (\n//       state,\n//       action: PayloadAction<{\n//         movieId: string;\n//         comment: string;\n//         userId: string;\n//         userName: string;\n//       }>\n//     ) => {\n//       const { movieId, comment, userId, userName } = action.payload;\n//       const movie = state.movies.find((m) => m._id === movieId);\n//       if (movie) {\n//         movie.comments.push({ userId, userName, comment });\n//       }\n//     },\n//     addRating: (\n//       state,\n//       action: PayloadAction<{\n//         movieId: string;\n//         rating: number;\n//         userId: string;\n//         userName: string;\n//       }>\n//     ) => {\n//       const { movieId, rating, userId, userName } = action.payload;\n//       const movie = state.movies.find((m) => m._id === movieId);\n//       if (movie) {\n//         movie.ratings.push({ userId, userName, rating });\n//       }\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchMovies.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(fetchMovies.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.movies = action.payload;\n//       })\n//       .addCase(fetchMovies.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.error.message || \"Failed to fetch movies\";\n//       });\n//   },\n// });\n\n// export const { addComment, addRating } = moviesSlice.actions;\n// export default moviesSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}