{"ast":null,"code":"// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import { Movie } from \"../../utils/interface/types\";\n\n// interface FavoritesState {\n//   favorites: {\n//     favorites: Movie[]; // Assuming you store movie IDs\n//     success: string;\n//   };\n//   loading: boolean;\n//   error: string | null;\n// }\n// ///////////////////////////\n// const initialState: FavoritesState = {\n//   favorites: {\n//     favorites: [],\n//     success: \"false\",\n//   },\n//   loading: false,\n//   error: null,\n// };\n\n// export const addFavorite = createAsyncThunk(\n//   \"favorites/addFavorite\",\n//   async (movie: Movie, { rejectWithValue, getState }) => {\n//     const state: any = getState();\n//     const token = state.user.userDetails?.token;\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/v1/addFavorite\",\n//         { movieId: movie.imdbID },\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       return response.data;\n//     } catch (error: any) {\n//       return rejectWithValue(\n//         error.response ? error.response.data : error.message\n//       );\n//     }\n//   }\n// );\n\n// export const removeFavorite = createAsyncThunk(\n//   \"favorites/removeFavorite\",\n//   async (imdbID: string, { rejectWithValue, getState }) => {\n//     const state: any = getState();\n//     const token = state.user.userDetails?.token;\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/v1/removeFavorite\",\n//         { movieId: imdbID },\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       return { imdbID };\n//     } catch (error: any) {\n//       return rejectWithValue(\n//         error.response ? error.response.data : error.message\n//       );\n//     }\n//   }\n// );\n\n// const favoritesSlice = createSlice({\n//   name: \"favorites\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(addFavorite.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(addFavorite.fulfilled, (state, action) => {\n//         state.loading = false;\n\n//         console.log(\"Add Favorite Fulfilled Action Payload:\", action.payload);\n//         console.log(\n//           \"Add Favorite Fulfilled Action Payload.favourites:\",\n//           action.payload.favorites\n//         );\n\n//         if (\n//           !state.favorites.some(\n//             (movie) => movie?.imdbID === action.payload.imdbID\n//           )\n//         ) {\n//           state.favorites = action.payload;\n//         }\n//       })\n//       .addCase(addFavorite.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload as string;\n//       })\n//       .addCase(removeFavorite.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(removeFavorite.fulfilled, (state, action) => {\n//         state.loading = false;\n\n//         console.log(\n//           \"Remove Favorite Fulfilled Action Payload:\",\n//           action.payload\n//         );\n\n//         state.favorites = state.favorites.filter(\n//           (movie) => movie?.imdbID !== action.payload.imdbID\n//         );\n//       })\n//       .addCase(removeFavorite.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload as string;\n//       });\n//   },\n// });\n\n// export default favoritesSlice.reducer;","map":{"version":3,"names":[],"sources":["/home/mohdadil/Desktop/MERN/movies-explorer-mern/frontend/src/redux/slices/favoritesSlice.tsx"],"sourcesContent":["// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import { Movie } from \"../../utils/interface/types\";\n\n// interface FavoritesState {\n//   favorites: {\n//     favorites: Movie[]; // Assuming you store movie IDs\n//     success: string;\n//   };\n//   loading: boolean;\n//   error: string | null;\n// }\n// ///////////////////////////\n// const initialState: FavoritesState = {\n//   favorites: {\n//     favorites: [],\n//     success: \"false\",\n//   },\n//   loading: false,\n//   error: null,\n// };\n\n// export const addFavorite = createAsyncThunk(\n//   \"favorites/addFavorite\",\n//   async (movie: Movie, { rejectWithValue, getState }) => {\n//     const state: any = getState();\n//     const token = state.user.userDetails?.token;\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/v1/addFavorite\",\n//         { movieId: movie.imdbID },\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       return response.data;\n//     } catch (error: any) {\n//       return rejectWithValue(\n//         error.response ? error.response.data : error.message\n//       );\n//     }\n//   }\n// );\n\n// export const removeFavorite = createAsyncThunk(\n//   \"favorites/removeFavorite\",\n//   async (imdbID: string, { rejectWithValue, getState }) => {\n//     const state: any = getState();\n//     const token = state.user.userDetails?.token;\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/v1/removeFavorite\",\n//         { movieId: imdbID },\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       return { imdbID };\n//     } catch (error: any) {\n//       return rejectWithValue(\n//         error.response ? error.response.data : error.message\n//       );\n//     }\n//   }\n// );\n\n// const favoritesSlice = createSlice({\n//   name: \"favorites\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(addFavorite.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(addFavorite.fulfilled, (state, action) => {\n//         state.loading = false;\n\n//         console.log(\"Add Favorite Fulfilled Action Payload:\", action.payload);\n//         console.log(\n//           \"Add Favorite Fulfilled Action Payload.favourites:\",\n//           action.payload.favorites\n//         );\n\n//         if (\n//           !state.favorites.some(\n//             (movie) => movie?.imdbID === action.payload.imdbID\n//           )\n//         ) {\n//           state.favorites = action.payload;\n//         }\n//       })\n//       .addCase(addFavorite.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload as string;\n//       })\n//       .addCase(removeFavorite.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(removeFavorite.fulfilled, (state, action) => {\n//         state.loading = false;\n\n//         console.log(\n//           \"Remove Favorite Fulfilled Action Payload:\",\n//           action.payload\n//         );\n\n//         state.favorites = state.favorites.filter(\n//           (movie) => movie?.imdbID !== action.payload.imdbID\n//         );\n//       })\n//       .addCase(removeFavorite.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload as string;\n//       });\n//   },\n// });\n\n// export default favoritesSlice.reducer;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}